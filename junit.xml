<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="cics-deploy Unit Tests" tests="306" failures="0" time="40.462">
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:50:52" time="11.64" tests="56">
    <testcase classname="BundleDeployer01 should complain with missing zOSMF profile for deploy" name="BundleDeployer01 should complain with missing zOSMF profile for deploy" time="0.012">
    </testcase>
    <testcase classname="BundleDeployer01 should complain with error during profile load for deploy" name="BundleDeployer01 should complain with error during profile load for deploy" time="0.005">
    </testcase>
    <testcase classname="BundleDeployer01 should complain with missing zOSMF profile for undeploy" name="BundleDeployer01 should complain with missing zOSMF profile for undeploy" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should complain if cicshlq not found" name="BundleDeployer01 should complain if cicshlq not found" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should complain if cicshlq not found2" name="BundleDeployer01 should complain if cicshlq not found2" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should complain if cpsmhlq not found" name="BundleDeployer01 should complain if cpsmhlq not found" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should complain if cpsmhlq not found2" name="BundleDeployer01 should complain if cpsmhlq not found2" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should handle failure during submitjobs processing" name="BundleDeployer01 should handle failure during submitjobs processing" time="0.025">
    </testcase>
    <testcase classname="BundleDeployer01 should update the progress bar" name="BundleDeployer01 should update the progress bar" time="1.513">
    </testcase>
    <testcase classname="BundleDeployer01 should include the JOBID in an error" name="BundleDeployer01 should include the JOBID in an error" time="1.513">
    </testcase>
    <testcase classname="BundleDeployer01 should complain if SYSTSPRT not found" name="BundleDeployer01 should complain if SYSTSPRT not found" time="0.007">
    </testcase>
    <testcase classname="BundleDeployer01 should failover to JESMSGLG if SYSTSPRT not found" name="BundleDeployer01 should failover to JESMSGLG if SYSTSPRT not found" time="0.004">
    </testcase>
    <testcase classname="BundleDeployer01 should tolerate empty output from DFHDPLOY" name="BundleDeployer01 should tolerate empty output from DFHDPLOY" time="0.005">
    </testcase>
    <testcase classname="BundleDeployer01 should complain if status can&apos;t be determined" name="BundleDeployer01 should complain if status can&apos;t be determined" time="0.003">
    </testcase>
    <testcase classname="BundleDeployer01 should complain if DFHDPLOY ends with an error" name="BundleDeployer01 should complain if DFHDPLOY ends with an error" time="0.003">
    </testcase>
    <testcase classname="BundleDeployer01 should complete with warnings " name="BundleDeployer01 should complete with warnings " time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should deploy successfully" name="BundleDeployer01 should deploy successfully" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should undeploy successfully" name="BundleDeployer01 should undeploy successfully" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should generate deploy JCL with neither csdgroup nor resgroup" name="BundleDeployer01 should generate deploy JCL with neither csdgroup nor resgroup" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should generate deploy JCL for csdgroup" name="BundleDeployer01 should generate deploy JCL for csdgroup" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should generate deploy JCL for csdgroup with timeout" name="BundleDeployer01 should generate deploy JCL for csdgroup with timeout" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should generate deploy JCL for resgroup" name="BundleDeployer01 should generate deploy JCL for resgroup" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should generate deploy JCL for resgroup with timeout" name="BundleDeployer01 should generate deploy JCL for resgroup with timeout" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should support multi-line jobcard" name="BundleDeployer01 should support multi-line jobcard" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should support multi-line jobcard with embedded new lines" name="BundleDeployer01 should support multi-line jobcard with embedded new lines" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should support long line jobcard" name="BundleDeployer01 should support long line jobcard" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should support really long line jobcard" name="BundleDeployer01 should support really long line jobcard" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should fail with overlong jobcard" name="BundleDeployer01 should fail with overlong jobcard" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 tolerate embedded quote" name="BundleDeployer01 tolerate embedded quote" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 tolerate embedded single quote" name="BundleDeployer01 tolerate embedded single quote" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 tolerate quotes around jobcard" name="BundleDeployer01 tolerate quotes around jobcard" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 tolerate single quotes around jobcard" name="BundleDeployer01 tolerate single quotes around jobcard" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 tolerate quotes around jobcard with embedded quote" name="BundleDeployer01 tolerate quotes around jobcard with embedded quote" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 tolerate single quotes around jobcard with embedded single quote" name="BundleDeployer01 tolerate single quotes around jobcard with embedded single quote" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should tolerate a single leading slash for jobcard" name="BundleDeployer01 should tolerate a single leading slash for jobcard" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should support long bundledir" name="BundleDeployer01 should support long bundledir" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should tolerate bundledir with extra slasshes" name="BundleDeployer01 should tolerate bundledir with extra slasshes" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should generate deploy JCL for AVAILABLE" name="BundleDeployer01 should generate deploy JCL for AVAILABLE" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should generate deploy JCL for ENABLED" name="BundleDeployer01 should generate deploy JCL for ENABLED" time="0.004">
    </testcase>
    <testcase classname="BundleDeployer01 should generate deploy JCL for DISABLED" name="BundleDeployer01 should generate deploy JCL for DISABLED" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should generate deploy JCL for mixed case" name="BundleDeployer01 should generate deploy JCL for mixed case" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should support verbose=true output for deploy" name="BundleDeployer01 should support verbose=true output for deploy" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should support verbose=false output for deploy" name="BundleDeployer01 should support verbose=false output for deploy" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should support long description" name="BundleDeployer01 should support long description" time="0.003">
    </testcase>
    <testcase classname="BundleDeployer01 should generate undeploy JCL with neither csdgroup nor resgroup" name="BundleDeployer01 should generate undeploy JCL with neither csdgroup nor resgroup" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should generate undeploy JCL for csdgroup" name="BundleDeployer01 should generate undeploy JCL for csdgroup" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should generate undeploy JCL for csdgroup with timeout" name="BundleDeployer01 should generate undeploy JCL for csdgroup with timeout" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should generate undeploy JCL for resgroup" name="BundleDeployer01 should generate undeploy JCL for resgroup" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should generate undeploy JCL for resgroup with timeout" name="BundleDeployer01 should generate undeploy JCL for resgroup with timeout" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should generate undeploy JCL for UNAVAILABLE" name="BundleDeployer01 should generate undeploy JCL for UNAVAILABLE" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should generate undeploy JCL for DISABLED" name="BundleDeployer01 should generate undeploy JCL for DISABLED" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should generate undeploy JCL for DISCARDED" name="BundleDeployer01 should generate undeploy JCL for DISCARDED" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should generate undeploy JCL for mixed case" name="BundleDeployer01 should generate undeploy JCL for mixed case" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should support verbose=true output for undeploy" name="BundleDeployer01 should support verbose=true output for undeploy" time="0.002">
    </testcase>
    <testcase classname="BundleDeployer01 should support verbose=false output for undeploy" name="BundleDeployer01 should support verbose=false output for undeploy" time="0.001">
    </testcase>
    <testcase classname="BundleDeployer01 should use task passed as parameter on deploy" name="BundleDeployer01 should use task passed as parameter on deploy" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:04" time="1.331" tests="13">
    <testcase classname="Manifest01 should read an existing manifest" name="Manifest01 should read an existing manifest" time="0.007">
    </testcase>
    <testcase classname="Manifest01 should create an empty manifest from empty dir" name="Manifest01 should create an empty manifest from empty dir" time="0.001">
    </testcase>
    <testcase classname="Manifest01 should create an empty manifest from empty META-INF dir" name="Manifest01 should create an empty manifest from empty META-INF dir" time="0">
    </testcase>
    <testcase classname="Manifest01 set the bundleId" name="Manifest01 set the bundleId" time="0.002">
    </testcase>
    <testcase classname="Manifest01 set a long  bundleId" name="Manifest01 set a long  bundleId" time="0.001">
    </testcase>
    <testcase classname="Manifest01 set a null bundleId" name="Manifest01 set a null bundleId" time="0.001">
    </testcase>
    <testcase classname="Manifest01 set a valid version number" name="Manifest01 set a valid version number" time="0.001">
    </testcase>
    <testcase classname="Manifest01 set an invalid major version number" name="Manifest01 set an invalid major version number" time="0">
    </testcase>
    <testcase classname="Manifest01 set an invalid minor version number" name="Manifest01 set an invalid minor version number" time="0.001">
    </testcase>
    <testcase classname="Manifest01 set an invalid micro version number" name="Manifest01 set an invalid micro version number" time="0.001">
    </testcase>
    <testcase classname="Manifest01 set a null version number" name="Manifest01 set a null version number" time="0.001">
    </testcase>
    <testcase classname="Manifest01 Parse a garbage manifest" name="Manifest01 Parse a garbage manifest" time="0.001">
    </testcase>
    <testcase classname="Manifest01 Parse a manifest with bad namespace" name="Manifest01 Parse a manifest with bad namespace" time="0">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:05" time="4.854" tests="87">
    <testcase classname="BundlePusher01 should complain with missing name" name="BundlePusher01 should complain with missing name" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should complain with empty name" name="BundlePusher01 should complain with empty name" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain with bad type for name" name="BundlePusher01 should complain with bad type for name" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain with over long name" name="BundlePusher01 should complain with over long name" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain with missing targetdir" name="BundlePusher01 should complain with missing targetdir" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain with empty targetdir" name="BundlePusher01 should complain with empty targetdir" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain with bad type for targetdir" name="BundlePusher01 should complain with bad type for targetdir" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain with over long targetdir" name="BundlePusher01 should complain with over long targetdir" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain with bad manifest file" name="BundlePusher01 should complain with bad manifest file" time="0.005">
    </testcase>
    <testcase classname="BundlePusher01 should complain with missing manifest file" name="BundlePusher01 should complain with missing manifest file" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain with missing zOSMF profile for push" name="BundlePusher01 should complain with missing zOSMF profile for push" time="0.004">
    </testcase>
    <testcase classname="BundlePusher01 should complain with error during profile load for push" name="BundlePusher01 should complain with error during profile load for push" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should implement --zosmf-* overrides" name="BundlePusher01 should implement --zosmf-* overrides" time="0.011">
    </testcase>
    <testcase classname="BundlePusher01 should complain if zosmf-host notset" name="BundlePusher01 should complain if zosmf-host notset" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain if zosmf-user notset" name="BundlePusher01 should complain if zosmf-user notset" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain if zosmf-password notset" name="BundlePusher01 should complain if zosmf-password notset" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should set default values if optional zosmf-* parameters notset" name="BundlePusher01 should set default values if optional zosmf-* parameters notset" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should complain with missing SSH profile for push" name="BundlePusher01 should complain with missing SSH profile for push" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should implement --ssh-* overrides" name="BundlePusher01 should implement --ssh-* overrides" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should complain if ssh-host notset" name="BundlePusher01 should complain if ssh-host notset" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain if ssh-user notset" name="BundlePusher01 should complain if ssh-user notset" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should set default values if optional ssh-* parameters notset" name="BundlePusher01 should set default values if optional ssh-* parameters notset" time="0.006">
    </testcase>
    <testcase classname="BundlePusher01 should implement --cics-* overrides" name="BundlePusher01 should implement --cics-* overrides" time="0.005">
    </testcase>
    <testcase classname="BundlePusher01 should complain if cics configured and cics-host notset" name="BundlePusher01 should complain if cics configured and cics-host notset" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should complain if cics configured and cics-user notset" name="BundlePusher01 should complain if cics configured and cics-user notset" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain if cics configured and cics-password notset" name="BundlePusher01 should complain if cics configured and cics-password notset" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should set default values if optional cics-* parameters notset" name="BundlePusher01 should set default values if optional cics-* parameters notset" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should complain with mismatching zOSMF and SSH profile host names" name="BundlePusher01 should complain with mismatching zOSMF and SSH profile host names" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should not complain with matching zOSMF and SSH profile host names" name="BundlePusher01 should not complain with matching zOSMF and SSH profile host names" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should complain with mismatching zOSMF and CICS profile host names" name="BundlePusher01 should complain with mismatching zOSMF and CICS profile host names" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should not complain with matching zOSMF and CICS profile host names" name="BundlePusher01 should not complain with matching zOSMF and CICS profile host names" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should complain with mismatching zOSMF and SSH profile user names" name="BundlePusher01 should complain with mismatching zOSMF and SSH profile user names" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should not complain with matching zOSMF and SSH profile user names" name="BundlePusher01 should not complain with matching zOSMF and SSH profile user names" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should not complain with matching zOSMF and SSH profile user names - case" name="BundlePusher01 should not complain with matching zOSMF and SSH profile user names - case" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should complain with mismatching zOSMF and CICS profile user names" name="BundlePusher01 should complain with mismatching zOSMF and CICS profile user names" time="0.004">
    </testcase>
    <testcase classname="BundlePusher01 should complain with mismatching zOSMF and SSH profile passwords" name="BundlePusher01 should complain with mismatching zOSMF and SSH profile passwords" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should tolerate mismatching zOSMF and SSH credentials if SSH keys are used" name="BundlePusher01 should tolerate mismatching zOSMF and SSH credentials if SSH keys are used" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should complain with mismatching zOSMF and cics profile passwords" name="BundlePusher01 should complain with mismatching zOSMF and cics profile passwords" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should complain if remote bundle dir mkdir fails" name="BundlePusher01 should complain if remote bundle dir mkdir fails" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain if remote target dir can&apos;t be found (string)" name="BundlePusher01 should complain if remote target dir can&apos;t be found (string)" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain if remote target dir can&apos;t be found (object)" name="BundlePusher01 should complain if remote target dir can&apos;t be found (object)" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain if remote target dir fails without cause object" name="BundlePusher01 should complain if remote target dir fails without cause object" time="0.005">
    </testcase>
    <testcase classname="BundlePusher01 should complain if remote bundle dir not auth" name="BundlePusher01 should complain if remote bundle dir not auth" time="0.006">
    </testcase>
    <testcase classname="BundlePusher01 should not complain if remote bundle dir already exists" name="BundlePusher01 should not complain if remote bundle dir already exists" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should complain if remote bundle dir error" name="BundlePusher01 should complain if remote bundle dir error" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should complain if remote bundledir list fails" name="BundlePusher01 should complain if remote bundledir list fails" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain if remote bundledir list returns empty response" name="BundlePusher01 should complain if remote bundledir list returns empty response" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should complain if remote bundledir list returns empty items" name="BundlePusher01 should complain if remote bundledir list returns empty items" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should complain if remote bundledir exists and is not a Bundle" name="BundlePusher01 should complain if remote bundledir exists and is not a Bundle" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should complain if remote bundledir is not empty and --overwrite not set" name="BundlePusher01 should complain if remote bundledir is not empty and --overwrite not set" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should handle error undeploying existing bundle" name="BundlePusher01 should handle error undeploying existing bundle" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should uninstall node modules" name="BundlePusher01 should uninstall node modules" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should cope with error uninstalling node modules" name="BundlePusher01 should cope with error uninstalling node modules" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should cope with error during delete of existing bundledir contents" name="BundlePusher01 should cope with error during delete of existing bundledir contents" time="0.001">
    </testcase>
    <testcase classname="BundlePusher01 should tolerate delete of empty directory" name="BundlePusher01 should tolerate delete of empty directory" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should not tolerate non zero return code from ssh command" name="BundlePusher01 should not tolerate non zero return code from ssh command" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should not tolerate mixture of FSUM9195 but exit status is not 1" name="BundlePusher01 should not tolerate mixture of FSUM9195 but exit status is not 1" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should not tolerate mixture of FSUM9195 and other FSUM messages" name="BundlePusher01 should not tolerate mixture of FSUM9195 and other FSUM messages" time="0.005">
    </testcase>
    <testcase classname="BundlePusher01 should handle error with attribs file" name="BundlePusher01 should handle error with attribs file" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should load zosattribs file" name="BundlePusher01 should load zosattribs file" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should use a default zosattribs file" name="BundlePusher01 should use a default zosattribs file" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should handle error with bundle upload" name="BundlePusher01 should handle error with bundle upload" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should handle custom bundle id" name="BundlePusher01 should handle custom bundle id" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should handle custom bundle id and version" name="BundlePusher01 should handle custom bundle id and version" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should handle error with remote npm install" name="BundlePusher01 should handle error with remote npm install" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should handle failure of remote npm install" name="BundlePusher01 should handle failure of remote npm install" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should handle failure of remote npm install with FSUM message" name="BundlePusher01 should handle failure of remote npm install with FSUM message" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should handle failure of remote npm install with node error" name="BundlePusher01 should handle failure of remote npm install with node error" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should handle error with remote bundle deploy" name="BundlePusher01 should handle error with remote bundle deploy" time="0.004">
    </testcase>
    <testcase classname="BundlePusher01 should run to completion" name="BundlePusher01 should run to completion" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should process an escaped targetdir" name="BundlePusher01 should process an escaped targetdir" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should set up auto conversion before running npm install" name="BundlePusher01 should set up auto conversion before running npm install" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should run npm install for each package.json" name="BundlePusher01 should run npm install for each package.json" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should run to completion with verbose output" name="BundlePusher01 should run to completion with verbose output" time="0.004">
    </testcase>
    <testcase classname="BundlePusher01 should run to completion with --verbose and --overwrite" name="BundlePusher01 should run to completion with --verbose and --overwrite" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should cope with a NODEJSAPP in the bundle but no CICS profile specified" name="BundlePusher01 should cope with a NODEJSAPP in the bundle but no CICS profile specified" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should cope with a NODEJSAPP in the bundle with a CICS profile specified" name="BundlePusher01 should cope with a NODEJSAPP in the bundle with a CICS profile specified" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should query scope even with no NODEJSAPPs" name="BundlePusher01 should query scope even with no NODEJSAPPs" time="0.004">
    </testcase>
    <testcase classname="BundlePusher01 should cope with a NODEJSAPP in the bundle with a CICS profile specified and --verbose" name="BundlePusher01 should cope with a NODEJSAPP in the bundle with a CICS profile specified and --verbose" time="0.004">
    </testcase>
    <testcase classname="BundlePusher01 should generate diagnostics even if deploy fails" name="BundlePusher01 should generate diagnostics even if deploy fails" time="0.004">
    </testcase>
    <testcase classname="BundlePusher01 should tolerate a Node.js diagnostics generation failure - region" name="BundlePusher01 should tolerate a Node.js diagnostics generation failure - region" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should tolerate a Node.js diagnostics generation failure - nodejsapp" name="BundlePusher01 should tolerate a Node.js diagnostics generation failure - nodejsapp" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should tolerate a Node.js diagnostics generation failure - nodejsapp empty" name="BundlePusher01 should tolerate a Node.js diagnostics generation failure - nodejsapp empty" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should generate Node.js diagnostics for 1 enabled NODEJSAPP" name="BundlePusher01 should generate Node.js diagnostics for 1 enabled NODEJSAPP" time="0.004">
    </testcase>
    <testcase classname="BundlePusher01 should generate Node.js diagnostics for 1 disabled NODEJSAPP" name="BundlePusher01 should generate Node.js diagnostics for 1 disabled NODEJSAPP" time="0.002">
    </testcase>
    <testcase classname="BundlePusher01 should generate Node.js diagnostics for 2 NODEJSAPPs" name="BundlePusher01 should generate Node.js diagnostics for 2 NODEJSAPPs" time="0.003">
    </testcase>
    <testcase classname="BundlePusher01 should not attempt to generate diagnostics for NODEJSAPPs if bundle does not install" name="BundlePusher01 should not attempt to generate diagnostics for NODEJSAPPs if bundle does not install" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:10" time="1.729" tests="1">
    <testcase classname="bundle Handler should complain with missing parameters" name="bundle Handler should complain with missing parameters" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:12" time="1.566" tests="54">
    <testcase classname="bundle Handler should complain with no name parameter" name="bundle Handler should complain with no name parameter" time="0.006">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for name parameter" name="bundle Handler should complain with invalid type for name parameter" time="0.002">
    </testcase>
    <testcase classname="bundle Handler should complain with overlong name parameter" name="bundle Handler should complain with overlong name parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with empty name parameter" name="bundle Handler should complain with empty name parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with no bundledir parameter" name="bundle Handler should complain with no bundledir parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for bundledir parameter" name="bundle Handler should complain with invalid type for bundledir parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with overlong bundledir parameter" name="bundle Handler should complain with overlong bundledir parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with empty bundledir parameter" name="bundle Handler should complain with empty bundledir parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain if profile, cicsplex and scope not set" name="bundle Handler should complain if profile, cicsplex and scope not set" time="0">
    </testcase>
    <testcase classname="bundle Handler should complain if profile not found" name="bundle Handler should complain if profile not found" time="0.003">
    </testcase>
    <testcase classname="bundle Handler should complain if profile is not a string" name="bundle Handler should complain if profile is not a string" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain if profile is empty" name="bundle Handler should complain if profile is empty" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for cicsplex parameter" name="bundle Handler should complain with invalid type for cicsplex parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with overlong cicsplex parameter" name="bundle Handler should complain with overlong cicsplex parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with empty cicsplex parameter" name="bundle Handler should complain with empty cicsplex parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for scope parameter" name="bundle Handler should complain with invalid type for scope parameter" time="0.006">
    </testcase>
    <testcase classname="bundle Handler should complain with overlong scope parameter" name="bundle Handler should complain with overlong scope parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with empty scope parameter" name="bundle Handler should complain with empty scope parameter" time="0">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for csdgroup parameter" name="bundle Handler should complain with invalid type for csdgroup parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with overlong csdgroup parameter" name="bundle Handler should complain with overlong csdgroup parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with empty csdgroup parameter" name="bundle Handler should complain with empty csdgroup parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with both csdgroup and resgroup set" name="bundle Handler should complain with both csdgroup and resgroup set" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for resgroup parameter" name="bundle Handler should complain with invalid type for resgroup parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with overlong resgroup parameter" name="bundle Handler should complain with overlong resgroup parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with empty resgroup parameter" name="bundle Handler should complain with empty resgroup parameter" time="0">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for description parameter" name="bundle Handler should complain with invalid type for description parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with overlong description parameter" name="bundle Handler should complain with overlong description parameter" time="0">
    </testcase>
    <testcase classname="bundle Handler should complain with empty description parameter" name="bundle Handler should complain with empty description parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with non-numeric timeout" name="bundle Handler should complain with non-numeric timeout" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with non-integer timeout" name="bundle Handler should complain with non-integer timeout" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with too large timeout" name="bundle Handler should complain with too large timeout" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with too small timeout" name="bundle Handler should complain with too small timeout" time="0">
    </testcase>
    <testcase classname="bundle Handler should complain with no cicshlq parameter" name="bundle Handler should complain with no cicshlq parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for cicshlq parameter" name="bundle Handler should complain with invalid type for cicshlq parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with overlong cicshlq parameter" name="bundle Handler should complain with overlong cicshlq parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with empty cicshlq parameter" name="bundle Handler should complain with empty cicshlq parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with no cpsmhlq parameter" name="bundle Handler should complain with no cpsmhlq parameter" time="0">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for cpsmhlq parameter" name="bundle Handler should complain with invalid type for cpsmhlq parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with overlong cpsmhlq parameter" name="bundle Handler should complain with overlong cpsmhlq parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with empty cpsmhlq parameter" name="bundle Handler should complain with empty cpsmhlq parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with no jobcard parameter" name="bundle Handler should complain with no jobcard parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for jobcard parameter" name="bundle Handler should complain with invalid type for jobcard parameter" time="0">
    </testcase>
    <testcase classname="bundle Handler should complain with empty jobcard parameter" name="bundle Handler should complain with empty jobcard parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain if jobcard doesn&apos;t start //" name="bundle Handler should complain if jobcard doesn&apos;t start //" time="0.006">
    </testcase>
    <testcase classname="bundle Handler should complain if jobname too long" name="bundle Handler should complain if jobname too long" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain if jobname too short" name="bundle Handler should complain if jobname too short" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain if jobcard omits JOB " name="bundle Handler should complain if jobcard omits JOB " time="0">
    </testcase>
    <testcase classname="bundle Handler should complain if jobcard omits JOB 2" name="bundle Handler should complain if jobcard omits JOB 2" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with no targetstate parameter" name="bundle Handler should complain with no targetstate parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for targetstate parameter" name="bundle Handler should complain with invalid type for targetstate parameter" time="0">
    </testcase>
    <testcase classname="bundle Handler should complain with empty targetstate parameter" name="bundle Handler should complain with empty targetstate parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid targetstate parameter" name="bundle Handler should complain with invalid targetstate parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for verbose parameter" name="bundle Handler should complain with invalid type for verbose parameter" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain if zosmf profile not found" name="bundle Handler should complain if zosmf profile not found" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:13" time="1.615" tests="15">
    <testcase classname="AutoBundler01 should read an existing bundle" name="AutoBundler01 should read an existing bundle" time="0.008">
    </testcase>
    <testcase classname="AutoBundler01 should not merge an existing bundle" name="AutoBundler01 should not merge an existing bundle" time="0.001">
    </testcase>
    <testcase classname="AutoBundler01 should set the bundleid" name="AutoBundler01 should set the bundleid" time="0.001">
    </testcase>
    <testcase classname="AutoBundler01 should set the bundle version" name="AutoBundler01 should set the bundle version" time="0.001">
    </testcase>
    <testcase classname="AutoBundler01 should receive default values from package.json" name="AutoBundler01 should receive default values from package.json" time="0.004">
    </testcase>
    <testcase classname="AutoBundler01 should support main script from package.json" name="AutoBundler01 should support main script from package.json" time="0.001">
    </testcase>
    <testcase classname="AutoBundler01 should set a nodejsapp name" name="AutoBundler01 should set a nodejsapp name" time="0.001">
    </testcase>
    <testcase classname="AutoBundler01 should set a startscript name" name="AutoBundler01 should set a startscript name" time="0.002">
    </testcase>
    <testcase classname="AutoBundler01 should set a port number" name="AutoBundler01 should set a port number" time="0.002">
    </testcase>
    <testcase classname="AutoBundler01 should cope with an empty directory" name="AutoBundler01 should cope with an empty directory" time="0">
    </testcase>
    <testcase classname="AutoBundler01 should cope with an empty directory and generate a NODEJSAPP" name="AutoBundler01 should cope with an empty directory and generate a NODEJSAPP" time="0.001">
    </testcase>
    <testcase classname="AutoBundler01 should detect a bad package.json" name="AutoBundler01 should detect a bad package.json" time="0.001">
    </testcase>
    <testcase classname="AutoBundler01 should tolerate an empty package.json" name="AutoBundler01 should tolerate an empty package.json" time="0">
    </testcase>
    <testcase classname="AutoBundler01 should tolerate an almost empty package.json" name="AutoBundler01 should tolerate an almost empty package.json" time="0">
    </testcase>
    <testcase classname="AutoBundler01 should detect --merge without --overwrite" name="AutoBundler01 should detect --merge without --overwrite" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:15" time="1.203" tests="5">
    <testcase classname="bundle Handler should process the current directory" name="bundle Handler should process the current directory" time="0.009">
    </testcase>
    <testcase classname="bundle Handler should cope with an empty directory" name="bundle Handler should cope with an empty directory" time="0.002">
    </testcase>
    <testcase classname="bundle Handler should process a directory with package.json" name="bundle Handler should process a directory with package.json" time="0.002">
    </testcase>
    <testcase classname="bundle Handler should produce the correct messages when overwrite on" name="bundle Handler should produce the correct messages when overwrite on" time="0.005">
    </testcase>
    <testcase classname="bundle Handler should produce the correct messages when merge on" name="bundle Handler should produce the correct messages when merge on" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:16" time="1.622" tests="5">
    <testcase classname="bundle Handler should complain with no parameters" name="bundle Handler should complain with no parameters" time="0.007">
    </testcase>
    <testcase classname="bundle Handler should complain with no targetstate parameter UNDEPLOY" name="bundle Handler should complain with no targetstate parameter UNDEPLOY" time="0.003">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid type for targetstate parameter UNDEPLOY" name="bundle Handler should complain with invalid type for targetstate parameter UNDEPLOY" time="0.001">
    </testcase>
    <testcase classname="bundle Handler should complain with empty targetstate parameter UNDEPLOY" name="bundle Handler should complain with empty targetstate parameter UNDEPLOY" time="0.002">
    </testcase>
    <testcase classname="bundle Handler should complain with invalid targetstate parameter UNDEPLOY" name="bundle Handler should complain with invalid targetstate parameter UNDEPLOY" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:18" time="1.02" tests="1">
    <testcase classname="bundle definition should match the snapshot" name="bundle definition should match the snapshot" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:19" time="1.03" tests="13">
    <testcase classname="SubtaskWithStatus Should fail with ticks &lt; 0" name="SubtaskWithStatus Should fail with ticks &lt; 0" time="0.006">
    </testcase>
    <testcase classname="SubtaskWithStatus Should fail with ticks &gt; 0" name="SubtaskWithStatus Should fail with ticks &gt; 0" time="0.001">
    </testcase>
    <testcase classname="SubtaskWithStatus Should set the parent task status" name="SubtaskWithStatus Should set the parent task status" time="0.001">
    </testcase>
    <testcase classname="SubtaskWithStatus Should set the parent task stage" name="SubtaskWithStatus Should set the parent task stage" time="0.001">
    </testcase>
    <testcase classname="SubtaskWithStatus Should not set the parent task to completed" name="SubtaskWithStatus Should not set the parent task to completed" time="0">
    </testcase>
    <testcase classname="SubtaskWithStatus Should not set the parent task to NOT_STARTED" name="SubtaskWithStatus Should not set the parent task to NOT_STARTED" time="0.001">
    </testcase>
    <testcase classname="SubtaskWithStatus should set percentComplete on parent task using scaled value" name="SubtaskWithStatus should set percentComplete on parent task using scaled value" time="0.001">
    </testcase>
    <testcase classname="SubtaskWithStatus should add to percentComplete on parent task using scaled value" name="SubtaskWithStatus should add to percentComplete on parent task using scaled value" time="0">
    </testcase>
    <testcase classname="SubtaskWithStatus should add to percentComplete on parent task using scaled value multiple times" name="SubtaskWithStatus should add to percentComplete on parent task using scaled value multiple times" time="0.007">
    </testcase>
    <testcase classname="SubtaskWithStatus should return subtask percentage complete" name="SubtaskWithStatus should return subtask percentage complete" time="0">
    </testcase>
    <testcase classname="SubtaskWithStatus should allow really small increments" name="SubtaskWithStatus should allow really small increments" time="0.001">
    </testcase>
    <testcase classname="SubtaskWithStatus should return subtask stage" name="SubtaskWithStatus should return subtask stage" time="0.001">
    </testcase>
    <testcase classname="SubtaskWithStatus should return subtask status message" name="SubtaskWithStatus should return subtask status message" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:20" time="0.975" tests="1">
    <testcase classname="bundle definition should match the snapshot" name="bundle definition should match the snapshot" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:21" time="1.02" tests="1">
    <testcase classname="Deploy definition should match the snapshot" name="Deploy definition should match the snapshot" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:22" time="0.969" tests="1">
    <testcase classname="Push definition should match the snapshot" name="Push definition should match the snapshot" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:23" time="1.107" tests="1">
    <testcase classname="Undeploy definition should match the snapshot" name="Undeploy definition should match the snapshot" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:24" time="0.997" tests="1">
    <testcase classname="bundle definition should match the snapshot" name="bundle definition should match the snapshot" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:25" time="1.022" tests="1">
    <testcase classname="bundle definition should match the snapshot" name="bundle definition should match the snapshot" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:26" time="1.001" tests="1">
    <testcase classname="Generate definition should match the snapshot" name="Generate definition should match the snapshot" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:27" time="0.914" tests="18">
    <testcase classname="Bundle01 should read an existing bundle" name="Bundle01 should read an existing bundle" time="0.006">
    </testcase>
    <testcase classname="Bundle01 set the id and version" name="Bundle01 set the id and version" time="0.001">
    </testcase>
    <testcase classname="Bundle01 add definitions" name="Bundle01 add definitions" time="0.003">
    </testcase>
    <testcase classname="Bundle01 add a definition that references files outside of the bundle" name="Bundle01 add a definition that references files outside of the bundle" time="0.002">
    </testcase>
    <testcase classname="Bundle01 add a not found definition" name="Bundle01 add a not found definition" time="0.001">
    </testcase>
    <testcase classname="Bundle01 add a part with missing name" name="Bundle01 add a part with missing name" time="0.001">
    </testcase>
    <testcase classname="Bundle01 add a part with missing type" name="Bundle01 add a part with missing type" time="0.001">
    </testcase>
    <testcase classname="Bundle01 add a part with missing path" name="Bundle01 add a part with missing path" time="0.001">
    </testcase>
    <testcase classname="Bundle01 tolerate an existing almost empty manifest" name="Bundle01 tolerate an existing almost empty manifest" time="0.001">
    </testcase>
    <testcase classname="Bundle01 should be able to add a resource to a single item manifest" name="Bundle01 should be able to add a resource to a single item manifest" time="0.001">
    </testcase>
    <testcase classname="Bundle01 add a NODEJSAPP" name="Bundle01 add a NODEJSAPP" time="0.002">
    </testcase>
    <testcase classname="Bundle01 should warn that an existing bundle cant be overwritten" name="Bundle01 should warn that an existing bundle cant be overwritten" time="0.001">
    </testcase>
    <testcase classname="Bundle01 should be able to save new definitions" name="Bundle01 should be able to save new definitions" time="0.001">
    </testcase>
    <testcase classname="Bundle01 should find a directory within the Bundle" name="Bundle01 should find a directory within the Bundle" time="0.001">
    </testcase>
    <testcase classname="Bundle01 should find a file within the Bundle" name="Bundle01 should find a file within the Bundle" time="0.001">
    </testcase>
    <testcase classname="Bundle01 should find a file within a directory within the Bundle" name="Bundle01 should find a file within a directory within the Bundle" time="0.001">
    </testcase>
    <testcase classname="Bundle01 should not find a missing file within the Bundle" name="Bundle01 should not find a missing file within the Bundle" time="0.001">
    </testcase>
    <testcase classname="Bundle01 should not find a file outside of the Bundle" name="Bundle01 should not find a file outside of the Bundle" time="0">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:28" time="0.994" tests="20">
    <testcase classname="MockedFilesystemTests should tolerate META-INF directory not existing" name="MockedFilesystemTests should tolerate META-INF directory not existing" time="0.003">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if no write permission to bundle directory" name="MockedFilesystemTests should complain if no write permission to bundle directory" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if no write permission to META-INF directory" name="MockedFilesystemTests should complain if no write permission to META-INF directory" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if no overwrite permission to manifest" name="MockedFilesystemTests should complain if no overwrite permission to manifest" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if no write permission to manifest" name="MockedFilesystemTests should complain if no write permission to manifest" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should tolerate absence of .nodejsapp directory" name="MockedFilesystemTests should tolerate absence of .nodejsapp directory" time="0.002">
    </testcase>
    <testcase classname="MockedFilesystemTests should detect inability to create .nodejsapp directory" name="MockedFilesystemTests should detect inability to create .nodejsapp directory" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should detect unwritable nodejsapps directory" name="MockedFilesystemTests should detect unwritable nodejsapps directory" time="0">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if existing .nodejsapp file isn&apos;t overwritable" name="MockedFilesystemTests should complain if existing .nodejsapp file isn&apos;t overwritable" time="0">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if no write permission to existing .nodejsapp" name="MockedFilesystemTests should complain if no write permission to existing .nodejsapp" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if no write permission to existing .profile" name="MockedFilesystemTests should complain if no write permission to existing .profile" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if no overwrite permission for existing .zosattributes" name="MockedFilesystemTests should complain if no overwrite permission for existing .zosattributes" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if can&apos;t make a new META-INF directory" name="MockedFilesystemTests should complain if can&apos;t make a new META-INF directory" time="0.002">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if writing the manifest fails" name="MockedFilesystemTests should complain if writing the manifest fails" time="0.006">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if creating nodejsapps dir fails" name="MockedFilesystemTests should complain if creating nodejsapps dir fails" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if writing .nodejsapp file fails" name="MockedFilesystemTests should complain if writing .nodejsapp file fails" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if writing .profile fails" name="MockedFilesystemTests should complain if writing .profile fails" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if writing .zosattributes fails" name="MockedFilesystemTests should complain if writing .zosattributes fails" time="0.001">
    </testcase>
    <testcase classname="MockedFilesystemTests should know if the bundle is valid" name="MockedFilesystemTests should know if the bundle is valid" time="0">
    </testcase>
    <testcase classname="MockedFilesystemTests should complain if exceptions are thrown during manifest parsing" name="MockedFilesystemTests should complain if exceptions are thrown during manifest parsing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:29" time="0.853" tests="10">
    <testcase classname="NodejsappBundlePart01 Create a NodejsappBundlePart" name="NodejsappBundlePart01 Create a NodejsappBundlePart" time="0.006">
    </testcase>
    <testcase classname="NodejsappBundlePart01 Create a NodejsappBundlePart with bad chars" name="NodejsappBundlePart01 Create a NodejsappBundlePart with bad chars" time="0.001">
    </testcase>
    <testcase classname="NodejsappBundlePart01 Create a NodejsappBundlePart with long name" name="NodejsappBundlePart01 Create a NodejsappBundlePart with long name" time="0.001">
    </testcase>
    <testcase classname="NodejsappBundlePart01 Create a NodejsappBundlePart with missing name parameter" name="NodejsappBundlePart01 Create a NodejsappBundlePart with missing name parameter" time="0.002">
    </testcase>
    <testcase classname="NodejsappBundlePart01 Create a NodejsappBundlePart with missing startscript" name="NodejsappBundlePart01 Create a NodejsappBundlePart with missing startscript" time="0.003">
    </testcase>
    <testcase classname="NodejsappBundlePart01 Create a NodejsappBundlePart with missing startscript parameter" name="NodejsappBundlePart01 Create a NodejsappBundlePart with missing startscript parameter" time="0.001">
    </testcase>
    <testcase classname="NodejsappBundlePart01 Create a NodejsappBundlePart with negative port number" name="NodejsappBundlePart01 Create a NodejsappBundlePart with negative port number" time="0">
    </testcase>
    <testcase classname="NodejsappBundlePart01 Create a NodejsappBundlePart with fractional port number" name="NodejsappBundlePart01 Create a NodejsappBundlePart with fractional port number" time="0">
    </testcase>
    <testcase classname="NodejsappBundlePart01 Create a NodejsappBundlePart with missing port number" name="NodejsappBundlePart01 Create a NodejsappBundlePart with missing port number" time="0.001">
    </testcase>
    <testcase classname="NodejsappBundlePart01 Create a NodejsappBundlePart with missing name" name="NodejsappBundlePart01 Create a NodejsappBundlePart with missing name" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="cics-deploy Unit Tests" errors="0" failures="0" skipped="0" timestamp="2020-06-29T15:51:30" time="0.877" tests="1">
    <testcase classname="imperative config config should match expected values" name="imperative config config should match expected values" time="0.088">
    </testcase>
  </testsuite>
</testsuites>